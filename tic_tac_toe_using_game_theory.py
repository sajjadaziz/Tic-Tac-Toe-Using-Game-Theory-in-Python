# -*- coding: utf-8 -*-
"""Tic-Tac-Toe-Using-Game-Theory.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YQQI8oRlkGboRWJAYDOXEQ1XE63I6tsJ
"""

import math as m
import sys
from tabulate import tabulate
row = 3
col = 3
def empty(board) :
	for i in range(row) :
		for j in range(col) :
			if (board[i][j] == '') :
				return True
	return False

def minmax(board, depth, maximum) :
	score = check_win(board)
	if score == 10:
		return score
	if score == -10:
		return score
	if empty(board) == False:
		return 0
	if maximum:	
		best = -1000
		for i in range(row) :		
			for j in range(col) :
				if (board[i][j]=='') :
					board[i][j] = c_sign
					best = max( best, minmax(board,depth + 1,not maximum) )
					board[i][j] = ''
		return best
	else :
		best = 1000
		for i in range(row) :		
			for j in range(col) :
				if (board[i][j] == '') :
					board[i][j] = sign
					best = min(best, minmax(board, depth + 1, not maximum))
					board[i][j] = ''
		return best
    
def check_win(board):
  if(board[0][0] == board[1][1] == board[2][2] == board[0][0] == sign):
    return -10
  elif(board[0][0] == board[1][1] == board[2][2] == board[0][0] == c_sign):
    return 10
  if(board[0][2] == board[1][1] == board[2][0] == board[1][1] == sign):
    return -10
  elif(board[0][2] == board[1][1] == board[2][0] == board[1][1] == c_sign):
    return 10

  for i in range(row):
    if(board[i][0] == board[i][1] == board[i][2] == board[i][0] == sign):
      return -10
    elif(board[i][0] == board[i][1] == board[i][2] == board[i][0] == c_sign):
      return 10
    if(board[0][i] == board[1][i] == board[2][i] == board[0][i] == sign):
      return -10
    elif(board[0][i] == board[1][i] == board[2][i] == board[0][i] == c_sign):
      return 10
  return 0

def computer_move(board):
  max = -m.inf
  for i in range(row):
    for j in range(col):
      if (board[i][j] == ''):
        board[i][j] = c_sign
        value = minmax(board, 0, False)
        board[i][j] = ''
        if (value > max):
          move = (i, j)
          max = value
  return move

board = [['','',''], 
         ['','',''], 
         ['','','']]
col_names = [0,1,2]

print("Welcome to Tic Tac Toe")
sign = input("Choose a sign (o or x) : ")

while sign not in ['x', 'o']:
  print("Select correct sign...!")
  sign = input("Choose a sign (o or x) : ")

if sign == 'x':
  c_sign = 'o'
else:
  c_sign = 'x'

i=5
while i>0:
  print("Your turn... ")
  r, c = input("Enter index of cell : ")
  r = int(r)
  c = int(c)
  while r and c not in range(3):
    print("Select correct indexes...!")
    r, c = input("Enter index of cell : ")
    r = int(r)
    c = int(c)
  while board[r][c] != '':
    print("This cell is already filled...!")
    r, c = input("Enter index of cell : ")
    r = int(r)
    c = int(c)
  board[r][c] = sign
  print(tabulate(board, headers=col_names, tablefmt="fancy_grid", stralign='center', showindex="always"))
  if check_win(board)!=0:
    print("You Win...!")
    break
  if(i==1):
    i-=1
    break
  print("Computer's turn... ")
  move = computer_move(board)
  board[move[0]][move[1]] = c_sign
  print(tabulate(board, headers=col_names, tablefmt="fancy_grid", stralign='center', showindex="always"))
  if check_win(board)!=0:
    print("You Loss...!")
    break
  i-=1

if i==0:
  print("Game Draw...!")